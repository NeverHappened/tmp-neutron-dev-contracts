{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "DexQuery",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "params"
      ],
      "properties": {
        "params": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "limit_order_trache_user"
      ],
      "properties": {
        "limit_order_trache_user": {
          "type": "object",
          "required": [
            "address",
            "tranche_key"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "tranche_key": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "limit_order_tranche_user_all"
      ],
      "properties": {
        "limit_order_tranche_user_all": {
          "type": "object",
          "required": [
            "pagination"
          ],
          "properties": {
            "pagination": {
              "$ref": "#/definitions/PageRequest"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "limit_order_tranche_user_all_by_address"
      ],
      "properties": {
        "limit_order_tranche_user_all_by_address": {
          "type": "object",
          "required": [
            "limit_orders"
          ],
          "properties": {
            "limit_orders": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/LimitOrderTrancheUser"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "pagination": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PageRequest"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "limit_order_tranche"
      ],
      "properties": {
        "limit_order_tranche": {
          "type": "object",
          "required": [
            "pair_id",
            "tick_index",
            "token_in",
            "tranche_key"
          ],
          "properties": {
            "pair_id": {
              "type": "string"
            },
            "tick_index": {
              "type": "integer",
              "format": "int64"
            },
            "token_in": {
              "type": "string"
            },
            "tranche_key": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "limit_order_tranche_all"
      ],
      "properties": {
        "limit_order_tranche_all": {
          "type": "object",
          "required": [
            "pair_id",
            "token_in"
          ],
          "properties": {
            "pagination": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PageRequest"
                },
                {
                  "type": "null"
                }
              ]
            },
            "pair_id": {
              "type": "string"
            },
            "token_in": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "user_deposit_all"
      ],
      "properties": {
        "user_deposit_all": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "pagination": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PageRequest"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "tick_liquidity_all"
      ],
      "properties": {
        "tick_liquidity_all": {
          "type": "object",
          "required": [
            "pair_id",
            "token_in"
          ],
          "properties": {
            "pagination": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PageRequest"
                },
                {
                  "type": "null"
                }
              ]
            },
            "pair_id": {
              "type": "string"
            },
            "token_in": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "inactive_limit_order_tranche"
      ],
      "properties": {
        "inactive_limit_order_tranche": {
          "type": "object",
          "required": [
            "pair_id",
            "tick_index",
            "token_in",
            "tranche_key"
          ],
          "properties": {
            "pair_id": {
              "type": "string"
            },
            "tick_index": {
              "type": "integer",
              "format": "int64"
            },
            "token_in": {
              "type": "string"
            },
            "tranche_key": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "inactive_limit_order_tranche_all"
      ],
      "properties": {
        "inactive_limit_order_tranche_all": {
          "type": "object",
          "properties": {
            "pagination": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PageRequest"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "pool_reserves_all"
      ],
      "properties": {
        "pool_reserves_all": {
          "type": "object",
          "required": [
            "pair_id",
            "token_in"
          ],
          "properties": {
            "pagination": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PageRequest"
                },
                {
                  "type": "null"
                }
              ]
            },
            "pair_id": {
              "type": "string"
            },
            "token_in": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "pool_reverses"
      ],
      "properties": {
        "pool_reverses": {
          "type": "object",
          "required": [
            "fee",
            "pair_id",
            "tick_index",
            "token_in"
          ],
          "properties": {
            "fee": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "pair_id": {
              "type": "string"
            },
            "tick_index": {
              "type": "integer",
              "format": "int64"
            },
            "token_in": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "estimate_multi_hop_swap"
      ],
      "properties": {
        "estimate_multi_hop_swap": {
          "type": "object",
          "required": [
            "amount_id",
            "creator",
            "exit_limit_price",
            "pick_best_route",
            "receiver",
            "routes"
          ],
          "properties": {
            "amount_id": {
              "$ref": "#/definitions/Int128"
            },
            "creator": {
              "type": "string"
            },
            "exit_limit_price": {
              "$ref": "#/definitions/PrecDec"
            },
            "pick_best_route": {
              "type": "boolean"
            },
            "receiver": {
              "type": "string"
            },
            "routes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MultiHopRoute"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "estimate_place_limit_order"
      ],
      "properties": {
        "estimate_place_limit_order": {
          "type": "object",
          "required": [
            "creator",
            "order_type",
            "receiver",
            "tick_index_in_to_out",
            "token_in",
            "token_out"
          ],
          "properties": {
            "creator": {
              "type": "string"
            },
            "expiration_time": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "max_amount_out": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Int128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "order_type": {
              "$ref": "#/definitions/LimitOrderType"
            },
            "receiver": {
              "type": "string"
            },
            "tick_index_in_to_out": {
              "$ref": "#/definitions/Uint128"
            },
            "token_in": {
              "type": "string"
            },
            "token_out": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "pool"
      ],
      "properties": {
        "pool": {
          "type": "object",
          "required": [
            "fee",
            "pair_id",
            "tick_index"
          ],
          "properties": {
            "fee": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "pair_id": {
              "type": "string"
            },
            "tick_index": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "pool_by_i_d"
      ],
      "properties": {
        "pool_by_i_d": {
          "type": "object",
          "required": [
            "pool_id"
          ],
          "properties": {
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "pool_metadata"
      ],
      "properties": {
        "pool_metadata": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "pool_metadata_all"
      ],
      "properties": {
        "pool_metadata_all": {
          "type": "object",
          "properties": {
            "pagination": {
              "anyOf": [
                {
                  "$ref": "#/definitions/PageRequest"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Int128": {
      "description": "An implementation of i128 that is using strings for JSON encoding/decoding, such that the full i128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `i128` to get the value out:\n\n``` # use cosmwasm_std::Int128; let a = Int128::from(258i128); assert_eq!(a.i128(), 258); ```",
      "type": "string"
    },
    "LimitOrderTrancheUser": {
      "type": "object",
      "required": [
        "address",
        "order_type",
        "shares_cancelled",
        "shares_owned",
        "shares_withdrawn",
        "tick_index_taker_to_maker",
        "trade_pair_id",
        "tranche_key"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "order_type": {
          "$ref": "#/definitions/LimitOrderType"
        },
        "shares_cancelled": {
          "$ref": "#/definitions/Int128"
        },
        "shares_owned": {
          "$ref": "#/definitions/Int128"
        },
        "shares_withdrawn": {
          "$ref": "#/definitions/Int128"
        },
        "tick_index_taker_to_maker": {
          "type": "integer",
          "format": "int64"
        },
        "trade_pair_id": {
          "$ref": "#/definitions/TradePairID"
        },
        "tranche_key": {
          "type": "string"
        }
      }
    },
    "LimitOrderType": {
      "type": "string",
      "enum": [
        "GoodTillCancel",
        "FillOrKill",
        "ImmediateOrCancel",
        "JustInTime",
        "GoodTilTime"
      ]
    },
    "MultiHopRoute": {
      "type": "object",
      "required": [
        "hops"
      ],
      "properties": {
        "hops": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PageRequest": {
      "type": "object",
      "required": [
        "count_total",
        "key",
        "limit",
        "offset",
        "reverse"
      ],
      "properties": {
        "count_total": {
          "description": "**count_total** is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
          "type": "boolean"
        },
        "key": {
          "description": "**key** is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "limit": {
          "description": "**limit** is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "offset": {
          "description": "**offset** is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "reverse": {
          "description": "reverse is set to true if results are to be returned in the descending order.",
          "type": "boolean"
        }
      }
    },
    "PrecDec": {
      "type": "object",
      "required": [
        "i"
      ],
      "properties": {
        "i": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "TradePairID": {
      "type": "object",
      "required": [
        "maker_denom",
        "taker_denom"
      ],
      "properties": {
        "maker_denom": {
          "type": "string"
        },
        "taker_denom": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
